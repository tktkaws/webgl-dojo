---
import Layout from '../../../layouts/Layout.astro';
const title = 'POST PROCESSING ORIGINAL SHADER';
---

<Layout title={title}>
	<h1>{title}</h1>
</Layout>

<style>
  body { margin: 0; }
  #target-img {
    display: none;
  }
</style>

<script>
 import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import fragmentShader from "./fragment.glsl";
import vertexShader from "./vertex.glsl";
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';
import {GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass.js';
import {FilmPass } from 'three/examples/jsm/postprocessing/FilmPass.js';
import {DotScreenPass } from 'three/examples/jsm/postprocessing/DotScreenPass.js';
import { FilmShader } from "three/examples/jsm/shaders/FilmShader";
import { ShaderPass } from "three/examples/jsm/postprocessing/ShaderPass";
import ppFragmentShader from "./ppfragment.glsl";




// メインのレンダラーの設定
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setClearColor(0xeeeeee);
document.body.appendChild(renderer.domElement);
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

// ポストプロセッシングの設定
const composer = new EffectComposer(renderer);
const renderPass = new RenderPass(scene, camera);
composer.addPass(renderPass);

const myShader = {
	uniforms: {
		tDiffuse: { value: null },
    uDivide: { value: 0.5 }
	},
	vertexShader: vertexShader,
	fragmentShader: ppFragmentShader

};

const pass = new ShaderPass(myShader)
composer.addPass(pass);

// レンダーターゲット
const renderTarget = new THREE.WebGLRenderTarget(500, 500);


const rtCamera = camera.clone();
rtCamera.aspect = 1;
rtCamera.updateProjectionMatrix();
const rtScene = new THREE.Scene();
rtScene.background = new THREE.Color(0x444444);
rtCamera.position.set(0, 0, 10);
camera.position.z = 10;
const controls = new OrbitControls(camera, renderer.domElement);

const rtGeo = new THREE.BoxGeometry(4, 4, 4);
const rtMate = new THREE.MeshLambertMaterial({
  color: 0x009dff,
  side: THREE.DoubleSide,
});
const rtMesh = new THREE.Mesh(rtGeo, rtMate);

const geo = new THREE.BoxGeometry(4, 4, 4);
const mate = new THREE.ShaderMaterial({
  vertexShader,
  fragmentShader,
  uniforms: {
    tDiffuse: { value: renderTarget.texture }
  }
 });
const mesh = new THREE.Mesh(geo, mate);
scene.add(mesh);

scene.background = new THREE.Color( 0xeeeeee );

const light1 = new THREE.PointLight(0xffffff, 1, 0);
light1.position.set(0, 20, 0);
rtScene.add(light1);

const light2 = new THREE.PointLight(0xffffff, 1, 0);
light2.position.set(10, 20, 10);
rtScene.add(light2);

const light3 = new THREE.PointLight(0xffffff, 1, 0);
light3.position.set(-10, -20, -10);
rtScene.add(light3);

const light4 = new THREE.AmbientLight(0xFFFFFF, 1.0);
rtScene.add(light4);

rtScene.add(rtMesh);

function animate() {
  requestAnimationFrame(animate);

  renderer.setRenderTarget(renderTarget);
  renderer.render(rtScene, rtCamera);
  renderer.setRenderTarget(null);

  // renderer.render(scene, camera);
  composer.render();

  rtMesh.rotation.x += 0.01;
  rtMesh.rotation.y += 0.01;

  controls.update();
}

animate();

</script>
