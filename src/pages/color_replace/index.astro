---
import Layout from '../../layouts/Layout.astro';
import Card from '../../components/Card.astro';
---

<Layout title="color replace">
	<h1>color replace</h1>
	<img id="target-img" src="/output1.jpg">

</Layout>

<style>
  body { margin: 0; }
  #target-img {
    display: none;
  }
</style>

<script>
  import vertShaderSource from "./vertex.glsl";
import fragShaderSource from "./fragment.glsl";
 import * as THREE from "three";

 init();
 async function init() {

   const scene = new THREE.Scene();
   const camera = new THREE.PerspectiveCamera(
     75,
     window.innerWidth / window.innerHeight,
     0.1,
     1000
   );

   const renderer = new THREE.WebGLRenderer({ antialias: true });
   renderer.setSize(window.innerWidth, window.innerHeight);
   renderer.setClearColor(0xffffff);

   /* エラー時にシェーダの全体のコードを表示(three.js 0.152.0 対応) */
   renderer.debug.onShaderError = ( gl, program, vertexShader, fragmentShader ) => {

     const vertexShaderSource = gl.getShaderSource( vertexShader );
     const fragmentShaderSource = gl.getShaderSource( fragmentShader );

     console.groupCollapsed( "vertexShader" )
     console.log( vertexShaderSource )
     console.groupEnd()

     console.groupCollapsed( "fragmentShader" )
     console.log( fragmentShaderSource )
     console.groupEnd()

   }

   document.body.appendChild(renderer.domElement);

   async function loadTex(url) {
     const texLoader = new THREE.TextureLoader();
     const texture = await texLoader.loadAsync(url);
     return texture;
   }

   const geometry = new THREE.PlaneGeometry(40, 20);
   const material = new THREE.ShaderMaterial({
     uniforms: {
       uTex: { value: await loadTex('/output1.jpg') },
       uTick: { value: 0 }
     },
     vertexShader: vertShaderSource,
     fragmentShader: fragShaderSource,
   });
   const cube = new THREE.Mesh(geometry, material);
   scene.add(cube);
   console.log(geometry);

   camera.position.z = 30;

   let i = 0;
   function animate() {
     requestAnimationFrame(animate);

     // cube.rotation.x = cube.rotation.x + 0.01;
     // cube.rotation.y += 0.01;
     material.uniforms.uTick.value++;

     renderer.render(scene, camera);
   }

   animate();
 }

</script>
