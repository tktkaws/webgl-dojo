---
import Layout from "../../../../layouts/Layout.astro";
const title = "レイキャスティングでホバーを検知";
---

<Layout title={title}>
  <div id="page-container">
    <h1 class="title">
      {title}
    </h1>
    <div data-webgl class="div1">div1</div>
    <section data-webgl class="gsap">gsap</section>
    <img data-webgl src="/output1.jpg" />
  </div>
  <canvas id="canvas"></canvas>
</Layout>

<style>
  body {
    margin: 0;
  }
  #page-container {
    height: 100vh;
  }
  #canvas {
    height: 100vh;
    width: 100vw;
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
  }
  [data-webgl] {
    background: green;
    opacity: 0.3;
  }

  .div1 {
    margin-left: 100px;
    margin-top: 100px;
    width: 100px;
    height: 100px;
  }

  section {
    margin-left: 300px;
    margin-top: 500px;
    width: 200px;
    height: 100px;
  }

  img {
    position: absolute;
    right: 100px;
    width: 300px;
    top: 10px;
  }

  .title {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 100;
    color: #000000;
    font-size: 20px;
    padding: 10px;
  }
</style>
<script>
  import gsap from "gsap";
  import Scrollbar from "smooth-scrollbar";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import {
    WebGLRenderer,
    Scene,
    PerspectiveCamera,
    PlaneGeometry,
    MeshBasicMaterial,
    ShaderMaterial,
    Mesh,
    Raycaster,
    Vector2,
  } from "three";

  const world = {};
  const os = [];
  const canvas = document.querySelector("#canvas");
  const canvasRect = canvas.getBoundingClientRect();

  const raycaster = new Raycaster();
  const pointer = new Vector2();

  init();
  function init() {
    initScroller();
    bindResizeEvents();

    world.renderer = new WebGLRenderer({
      canvas,
      antialias: true,
    });
    world.renderer.setSize(canvasRect.width, canvasRect.height, false);
    world.renderer.setPixelRatio(window.devicePixelRatio);
    world.renderer.setClearColor(0x000000, 0);

    world.scene = new Scene();

    const cameraWidth = canvasRect.width;
    const cameraHeight = canvasRect.height;
    const near = 1500;
    const far = 4000;
    const aspect = cameraWidth / cameraHeight;
    const cameraZ = 2500;
    const radian = 2 * Math.atan(cameraHeight / 2 / cameraZ);
    const fov = radian * (180 / Math.PI);
    world.camera = new PerspectiveCamera(fov, aspect, near, far);
    world.camera.position.z = cameraZ;

    const els = document.querySelectorAll("[data-webgl]");
    els.forEach((el) => {
      const rect = el.getBoundingClientRect();

      const geometry = new PlaneGeometry(rect.width, rect.height, 1, 1);
      // const material = new MeshBasicMaterial({
      //   color: 0xff0000,
      //   transparent: true,
      //   opacity: 0.3,
      // });
      const material = new ShaderMaterial({
        vertexShader: `
        varying vec2 vUv;

        void main() {
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);
        }
      `,
        fragmentShader: `
        varying vec2 vUv;
        uniform vec2 uMouse;
        uniform float uHover;

        void main() {
          vec2 mouse = step(uMouse, vUv);
          gl_FragColor = vec4(mouse, uHover, 1.);
        }
      `,
        uniforms: {
          uMouse: { value: new Vector2(0.5, 0.5) },
          uHover: { value: 0 },
        },
      });

      const mesh = new Mesh(geometry, material);
      mesh.position.z = 0;

      const { x, y } = getWorldPosition(rect, canvasRect);
      mesh.position.x = x;
      mesh.position.y = y;

      const o = {
        mesh,
        geometry,
        material,
        rect,
        $: {
          el,
        },
      };

      world.scene.add(mesh);
      os.push(o);
    });

    // animate();
    // function animate() {
    //   requestAnimationFrame(animate);
    //   // スクロール処理
    //   os.forEach((o) => scroll(o));
    //   world.renderer.render(world.scene, world.camera);
    // }
    render();
    function render() {
      requestAnimationFrame(render);
      // スクロール処理
      os.forEach((o) => scroll(o));

      // レイキャスティング
      raycast();

      world.renderer.render(world.scene, world.camera);
    }
  }

  function scroll(o) {
    const {
      $: { el },
      mesh,
    } = o;
    const rect = el.getBoundingClientRect();
    const { x, y } = getWorldPosition(rect, canvasRect);
    // mesh.position.x = x;
    mesh.position.y = y;
  }

  function resize(o, newCanvasRect) {
    const {
      $: { el },
      mesh,
      geometry,
      rect,
    } = o;
    const nextRect = el.getBoundingClientRect();
    const { x, y } = getWorldPosition(nextRect, newCanvasRect);
    mesh.position.x = x;
    mesh.position.y = y;

    // 大きさの変更
    geometry.scale(
      nextRect.width / rect.width,
      nextRect.height / rect.height,
      1
    );

    o.rect = nextRect;
  }

  function getWorldPosition(rect, canvasRect) {
    const x = rect.left + rect.width / 2 - canvasRect.width / 2;
    const y = -rect.top - rect.height / 2 + canvasRect.height / 2;
    return { x, y };
  }

  function initScroller() {
    gsap.registerPlugin(ScrollTrigger);

    const pageContainer = document.querySelector("#page-container");
    const scrollBar = Scrollbar.init(pageContainer, { delegateTo: document });

    ScrollTrigger.scrollerProxy(pageContainer, {
      scrollTop(value) {
        if (arguments.length) {
          scrollBar.scrollTop = value; // setter
        }
        return scrollBar.scrollTop; // getter
      },
      // getBoundingClientRect() {
      //   return {top: 0, left: 0, width: window.innerWidth, height: window.innerHeight};
      // }
    });

    scrollBar.addListener(ScrollTrigger.update);

    ScrollTrigger.defaults({
      scroller: pageContainer,
    });

    const el = document.querySelector(".gsap");

    // const meshX = os[1].mesh.position.x;
    // const animation = {
    //   rotation: 0,
    //   x: meshX,
    // };
    // gsap.to(animation, {
    //   rotation: Math.PI * 2,
    //   x: meshX + 600,
    //   scrollTrigger: {
    //     trigger: el,
    //     start: "center 80%",
    //     end: "center 20%",
    //     scrub: true,
    //     pin: true,
    //   },
    //   onUpdate() {
    //     os[1].mesh.position.x = animation.x;
    //     os[1].mesh.rotation.z = animation.rotation;
    //   },
    // });
  }

  function bindResizeEvents() {
    let timerId = null;

    window.addEventListener("resize", () => {
      clearTimeout(timerId);
      timerId = setTimeout(() => {
        console.log("resize");

        const newCanvasRect = canvas.getBoundingClientRect();
        console.log(newCanvasRect);

        // canvasサイズの変更
        world.renderer.setSize(
          newCanvasRect.width,
          newCanvasRect.height,
          false
        );

        // meshの位置とサイズの変更
        os.forEach((o) => resize(o, newCanvasRect));

        // cameraのProjectionMatrixの変更
        const cameraWidth = newCanvasRect.width;
        const cameraHeight = newCanvasRect.height;
        const near = 1500;
        const far = 4000;
        const aspect = cameraWidth / cameraHeight;
        const cameraZ = 2500;
        const radian = 2 * Math.atan(cameraHeight / 2 / cameraZ);
        const fov = radian * (180 / Math.PI);

        world.camera.fov = fov;
        world.camera.near = near;
        world.camera.far = far;
        world.camera.aspect = aspect;
        world.camera.updateProjectionMatrix();
      }, 500);
    });
  }

  function onPointerMove(event) {
    // calculate pointer position in normalized device coordinates
    // (-1 to +1) for both components

    pointer.x = (event.clientX / window.innerWidth) * 2 - 1;
    pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;
  }

  function raycast() {
    // update the picking ray with the camera and pointer position
    raycaster.setFromCamera(pointer, world.camera);

    // calculate objects intersecting the picking ray
    const intersects = raycaster.intersectObjects(world.scene.children);
    const intersect = intersects[0];

    for (let i = 0; i < world.scene.children.length; i++) {
      const _mesh = world.scene.children[i];

      const uHover = _mesh.material.uniforms.uHover;
      if (intersect?.object === _mesh) {
        _mesh.material.uniforms.uMouse.value = intersect.uv;
        uHover.__endValue = 1;
      } else {
        uHover.__endValue = 0;
      }

      uHover.value = lerp(uHover.value, uHover.__endValue, 0.1);
    }
  }

  // 線形補間
  function lerp(a, b, n) {
    let current = (1 - n) * a + n * b;
    if (Math.abs(b - current) < 0.001) current = b;
    return current;
  }

  window.addEventListener("pointermove", onPointerMove);

  /**
* Raycasting
* https://threejs.org/docs/#api/en/core/Raycaster

const raycaster = new THREE.Raycaster();
const pointer = new THREE.Vector2();

function onPointerMove( event ) {

// calculate pointer position in normalized device coordinates
// (-1 to +1) for both components

pointer.x = ( event.clientX / window.innerWidth ) * 2 - 1;
pointer.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

}

function render() {

// update the picking ray with the camera and pointer position
raycaster.setFromCamera( pointer, camera );

// calculate objects intersecting the picking ray
const intersects = raycaster.intersectObjects( scene.children );

for ( let i = 0; i < intersects.length; i ++ ) {

  intersects[ i ].object.material.color.set( 0xff0000 );

}

renderer.render( scene, camera );

}

window.addEventListener( 'pointermove', onPointerMove );

window.requestAnimationFrame(render);
*/
</script>
